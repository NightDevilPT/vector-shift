File Path: frontend\src\App.js
Contents:
import { PipelineToolbar } from './toolbar';
import { PipelineUI } from './ui';
import { SubmitButton } from './submit';

function App() {
  return (
    <div>
      <PipelineToolbar />
      <PipelineUI />
      <SubmitButton />
    </div>
  );
}

export default App;

--------------------------------------------------

File Path: frontend\src\draggableNode.js
Contents:
// draggableNode.js

export const DraggableNode = ({ type, label }) => {
    const onDragStart = (event, nodeType) => {
      const appData = { nodeType }
      event.target.style.cursor = 'grabbing';
      event.dataTransfer.setData('application/reactflow', JSON.stringify(appData));
      event.dataTransfer.effectAllowed = 'move';
    };
  
    return (
      <div
        className={type}
        onDragStart={(event) => onDragStart(event, type)}
        onDragEnd={(event) => (event.target.style.cursor = 'grab')}
        style={{ 
          cursor: 'grab', 
          minWidth: '80px', 
          height: '60px',
          display: 'flex', 
          alignItems: 'center', 
          borderRadius: '8px',
          backgroundColor: '#1C2536',
          justifyContent: 'center', 
          flexDirection: 'column'
        }} 
        draggable
      >
          <span style={{ color: '#fff' }}>{label}</span>
      </div>
    );
  };
  
--------------------------------------------------

File Path: frontend\src\index.css
Contents:
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;


body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* frontend/src/index.css */
.react-flow__handle {
  width: 10px !important;               /* Equivalent to Tailwind's w-2.5 */
  height: 10px !important;              /* Equivalent to Tailwind's h-2.5 */
  border-radius: 50% !important;        /* Equivalent to rounded-full */
  background-color: white !important;   /* Equivalent to bg-white */
  border: 1px solid black !important;   /* Equivalent to border-2 border-black */
}

--------------------------------------------------

File Path: frontend\src\index.js
Contents:
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

--------------------------------------------------

File Path: frontend\src\nodes\baseNode.js
Contents:
import { Handle, useUpdateNodeInternals } from "reactflow";
import { useStore } from "../store";
import { v4 as uuidv4 } from "uuid";
import { useEffect } from "react";

export const BaseNode = ({
  id,
  title,
  children,
  style,
  sourceHandle = false,
  targetHandle = false,
  handlers = [], // New prop: array of handler objects
}) => {
  const removeNode = useStore((state) => state.removeNode);
  const updateNodeInternals = useUpdateNodeInternals(); // Hook to update node internals

  // Ensure node internals update whenever handlers change
  useEffect(() => {
    updateNodeInternals(id);
  }, [handlers, id, updateNodeInternals]);

  return (
    <div
      className={`p-3 rounded-lg shadow-md border-[1px] border-slate-200 bg-white ${style}`}
    >
      <div className="flex justify-between items-center w-full font-bold text-base">
        <span>{title}</span>
        <button
          onClick={() => removeNode(id)} // Placeholder for remove function
          className="bg-transparent border-none text-gray-600 cursor-pointer text-lg"
        >
          âœ•
        </button>
      </div>
      <hr className="w-full border-gray-300 my-2" />

      {handlers.map((handler, index) => (
        <div
          key={handler.id}
          className="absolute flex items-center"
          style={{ top: `${20 + index * 28}px`, left: "0px" }}
        >
          <Handle type="target" position={handler.position} id={handler.id} />
          <div className="absolute z-10 right-2 text-xs text-gray-400 ml-1 px-2 rounded-full border border-gray-300">
            {handler.label}
          </div>
        </div>
      ))}

      {children}

      {/* Conditionally render source and target handles */}
      {sourceHandle && (
        <Handle
          type="source"
          position="right"
          style={{ top: "50%", transform: "translateY(-50%)" }}
        />
      )}
      {targetHandle && (
        <Handle
          type="target"
          position="left"
          style={{ top: "50%", transform: "translateY(-50%)" }}
        />
      )}
    </div>
  );
};

--------------------------------------------------

File Path: frontend\src\nodes\inputNode.js
Contents:
import { useState } from "react";
import { useStore } from "../store";
import { BaseNode } from "./baseNode";

export const InputNode = ({ id, data }) => {
	const [currName, setCurrName] = useState("");
	const [inputType, setInputType] = useState(data.inputType || "Text");

	// Get the store's updateNodeField function
	const updateNodeField = useStore((state) => state.updateNodeField);

	// Update store whenever currName changes
	const handleNameChange = (e) => {
		const newName = e.target.value;
		setCurrName(newName);
		updateNodeField(id, "inputName", newName); // Update the store with the new name
	};

	// Update store whenever inputType changes
	const handleTypeChange = (e) => {
		const newType = e.target.value;
		setInputType(newType);
		updateNodeField(id, "inputType", newType); // Update the store with the new type
	};

	return (
		<BaseNode
			className="p-3 text-gray-700 bg-white" // Tailwind styling for node container
			sourceHandle={true}
			title={"Input Node"}
			id={id}
		>
			<div className="w-full h-full">
				<div className="w-full flex items-center gap-2 mb-2">
					<label className="block text-xs font-medium text-gray-700 min-w-10">
						Name:
					</label>
					<input
						type="text"
						value={currName}
						onChange={handleNameChange}
						className="rounded-lg border border-gray-300 p-1 text-gray-700 text-xs"
					/>
				</div>
				<div className="w-full flex items-center gap-2 mb-2">
					<label className="block text-xs font-medium text-gray-700 min-w-10">
						Type:
					</label>
					<select
						value={inputType}
						onChange={handleTypeChange}
						className="rounded-lg border border-gray-300 p-1 text-gray-700 text-xs"
					>
						<option value="Text">Text</option>
						<option value="File">File</option>
					</select>
				</div>
			</div>
		</BaseNode>
	);
};


--------------------------------------------------

File Path: frontend\src\nodes\llmNode.js
Contents:
import { useState, useEffect } from 'react';
import { useStore } from '../store';
import { BaseNode } from './baseNode';

export const LLMNode = ({ id, data }) => {
  const [connectedData, setConnectedData] = useState(null); // State to store connected node data

  // Fetch the store's function to get connected node data
  const getConnectedNodeData = useStore((state) => state.getConnectedNodeData);
  const edges = useStore((state) => state.edges); // Listen for changes in edges
  const nodes = useStore((state) => state.nodes); // Listen for changes in nodes

  useEffect(() => {
    // Fetch data from connected nodes whenever edges or nodes change
    const connectedNodes = getConnectedNodeData(id);
    setConnectedData(connectedNodes.length > 0 ? connectedNodes[0].data : null); // Show the first connected node's data if available
  }, [id, edges, nodes, getConnectedNodeData]); // Re-run this effect when edges or nodes change

  return (
    <BaseNode className="p-3 text-gray-700" sourceHandle={true} targetHandle={true} title={"LLM Node"} id={id}>
      <div className="w-full h-full">
        <span className="block mb-2 text-gray-700 text-sm">
          This is an LLM node.
        </span>

        {/* Display connected node data if available */}
        <div className="p-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-700 text-sm">
          {connectedData ? (
            <>
              <h4 className="mb-1 font-semibold">Connected Node Data:</h4>
              <pre className="whitespace-pre-wrap break-words">
                {JSON.stringify(connectedData, null, 2)}
              </pre>
            </>
          ) : (
            <div className="text-gray-400">No connected node or data available</div>
          )}
        </div>
      </div>
    </BaseNode>
  );
};

--------------------------------------------------

File Path: frontend\src\nodes\outputNode.js
Contents:
import { useState, useEffect } from 'react';
import { useStore } from '../store';
import { BaseNode } from './baseNode';

export const OutputNode = ({ id, data }) => {
  const [currName, setCurrName] = useState(data?.outputName || id.replace('customOutput-', 'output_'));
  const [outputType, setOutputType] = useState(data.outputType || 'Text');
  const [connectedData, setConnectedData] = useState(null);

  // Access the function to get connected node data and the current edges and nodes
  const getConnectedNodeData = useStore((state) => state.getConnectedNodeData);
  const edges = useStore((state) => state.edges);

  useEffect(() => {
    // Get data from any nodes connected to this output node
    const connectedNodes = getConnectedNodeData(id);

    if (connectedNodes.length > 0) {
      const nodeData = connectedNodes[0].data;

      // Check if the connected node has transformed data (e.g., resolvedText in TextNode)
      const transformedData = nodeData;
      console.log(nodeData,'@#@#@#@#')

      setConnectedData(transformedData);
    } else {
      setConnectedData(null); // Set to null if no connected nodes
    }
  }, [id, edges, getConnectedNodeData]); // Run this effect whenever edges change

  const handleNameChange = (e) => setCurrName(e.target.value);
  const handleTypeChange = (e) => setOutputType(e.target.value);
  

  return (
    <BaseNode className="p-3 text-gray-700" targetHandle={true} title={"Output Node"} id={id}>
      <div className="w-full h-full">
        <label className="block mb-1 text-xs font-medium text-gray-700">
          Name:
          <input
            type="text"
            value={currName}
            onChange={handleNameChange}
            disabled
            className="ml-2 rounded-lg border border-gray-300 p-1 text-gray-700 text-sm"
          />
        </label>
        <label className="block mb-2 text-xs font-medium text-gray-700">
          Type:
          <select
            value={outputType}
            onChange={handleTypeChange}
            className="ml-2 rounded-lg border border-gray-300 p-1 text-gray-700 text-sm"
          >
            <option value="Text">Text</option>
            <option value="File">Image</option>
          </select>
        </label>

        {/* Display connected node data if available, or connection status */}
        <div className="p-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-700 text-sm">
          {connectedData ? (
            <>
              <h4 className="mb-1 font-semibold">Connected Node Data:</h4>
              <pre className="whitespace-pre-wrap break-words">
                {JSON.stringify(connectedData, null, 2)}
              </pre>
            </>
          ) : (
            <div className="text-gray-400">No connected node or data available</div>
          )}
        </div>
      </div>
    </BaseNode>
  );
};

--------------------------------------------------

File Path: frontend\src\nodes\textNode.js
Contents:
import { useState, useEffect, useRef } from "react";
import { useStore } from "../store";
import { BaseNode } from "./baseNode";
import { Position } from "reactflow";

export const TextNode = ({ id, data }) => {
	const [currText, setCurrText] = useState(data?.text || "{{input}}");
	const [variables, setVariables] = useState([]); // Store variables from the text
	const [connectedData, setConnectedData] = useState({}); // Store data from connected nodes
	const [resolvedText, setResolvedText] = useState(""); // Track resolved text

	const updateNodeField = useStore((state) => state.updateNodeField);
	const getConnectedNodeData = useStore(
		(state) => state.getConnectedNodeData
	); // Fetch connected node data
	const edges = useStore((state) => state.edges); // Get edges to detect changes in connections
	const textareaRef = useRef(null); // Ref to access textarea

	// Update the text in local and global state
	const handleTextChange = (e) => {
		const newText = e.target.value;
		setCurrText(newText);
		updateResolvedText(newText, connectedData); // Compute and save resolved text
	};

	// Function to compute and update resolvedText in the store
	const updateResolvedText = (rawText, data) => {
		// Detect variables in the format {{variableName}}
		const variableMatches = Array.from(
			new Set(rawText.match(/{{(.*?)}}/g))
		);
		const cleanVariables = variableMatches.map((v) =>
			v.replace(/{{|}}/g, "")
		); // Remove braces
		setVariables(cleanVariables);

		// Replace variables in `rawText` with connected data values
		let newResolvedText = rawText;
		cleanVariables.forEach((variable) => {
			if (data[variable]) {
				const regex = new RegExp(`{{${variable}}}`, "g"); // Replace all occurrences
				newResolvedText = newResolvedText.replace(
					regex,
					data[variable]
				);
			}
		});

		// Update both raw and resolved text in the global store
		updateNodeField(id, "text", rawText);
		updateNodeField(id, "resolvedText", newResolvedText); // Save resolved text
		setResolvedText(newResolvedText); // Update local state as well
	};

	// Update connected data whenever edges or node connections change
	useEffect(() => {
		const updatedConnectedData = {};
		const connectedNodes = getConnectedNodeData(id);

		// Map connected node data to variable names in `currText`
		connectedNodes.forEach((node) => {
			if (node.data && node.data.inputName) {
				updatedConnectedData["input"] = node.data.inputName;
			}
		});

		setConnectedData(updatedConnectedData);

		// Update resolvedText based on new connected data
		updateResolvedText(currText, updatedConnectedData);

		// Notify store about the change
		updateNodeField(id, "connectedData", updatedConnectedData);
	}, [id, edges, getConnectedNodeData]);

	// Adjust textarea dimensions based on content
	useEffect(() => {
		if (textareaRef.current) {
			textareaRef.current.style.height = "auto"; // Reset height
			textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`; // Adjust height to content
		}
	}, [currText]);

	// Prepare handlers array for BaseNode
	const handlers = variables.map((variable) => ({
		position: Position.Left,
		label: variable, // Display variable name
		id: `${id}-${variable}`, // Ensure unique IDs for each handler
	}));

	return (
		<BaseNode
			className="text-gray-700 min-w-40"
			sourceHandle={true} // Allows it to connect as a source node
			title={"Text Node"}
			id={id}
			handlers={handlers} // Pass handlers to BaseNode
		>
			<div className="w-full h-full">
				<label>
					<textarea
						ref={textareaRef} // Attach ref to textarea
						value={currText}
						className="w-full h-auto overflow-hidden resize-none rounded-lg border border-gray-300 text-gray-700"
						onChange={handleTextChange}
					/>
				</label>
				<p className="text-xs text-gray-500 mt-2">
					Variables:{" "}
					{variables.length ? variables.join(", ") : "None"}
				</p>
				<p className="text-xs text-gray-400 mt-2">
					<strong>Raw Text:</strong> {currText}
				</p>
				<p className="text-xs text-gray-400">
					<strong>Resolved Text:</strong> {resolvedText}
				</p>
			</div>
		</BaseNode>
	);
};

--------------------------------------------------

File Path: frontend\src\store.js
Contents:
import { create } from "zustand";
import {
    addEdge,
    applyNodeChanges,
    applyEdgeChanges,
    MarkerType,
} from 'reactflow';
import { v4 as uuidv4 } from 'uuid';

export const useStore = create((set, get) => ({
    nodes: [],
    edges: [],
    nodeIDs: {},

    getNodeID: (type) => {
        return `${type}-${uuidv4()}`;
    },

    addNode: (node) => {
        set({
            nodes: [...get().nodes, node]
        });
    },

    onNodesChange: (changes) => {
        set({
            nodes: applyNodeChanges(changes, get().nodes),
        });
    },

    onEdgesChange: (changes) => {
        set({
            edges: applyEdgeChanges(changes, get().edges),
        });
    },

    onConnect: (connection) => {
        set({
            edges: addEdge({
                ...connection,
                type: 'smoothstep',
                animated: true,
                markerEnd: {type: MarkerType.Arrow, height: '20px', width: '20px'}
            }, get().edges),
        });
    },

    updateNodeField: (nodeId, fieldName, fieldValue) => {
        set({
            nodes: get().nodes.map((node) => {
                if (node.id === nodeId) {
                    node.data = { ...node.data, [fieldName]: fieldValue };
                }
                return node;
            }),
        });
    },

    // Function to get data from nodes connected to a specific node
    getConnectedNodeData: (nodeId) => {
        const { edges, nodes } = get();

        // Find nodes connected as sources to this node
        const connectedNodes = edges
            .filter(edge => edge.target === nodeId)
            .map(edge => nodes.find(node => node.id === edge.source))
            .filter(node => node && node.data); // Filter nodes with existing data

        return connectedNodes;
    },

    removeNode: (nodeId) => {
        const { nodes, edges } = get();

        // Filter out the node to be removed
        const updatedNodes = nodes.filter(node => node.id !== nodeId);

        // Filter out edges connected to the removed node
        const updatedEdges = edges.filter(edge => edge.source !== nodeId && edge.target !== nodeId);

        set({
            nodes: updatedNodes,
            edges: updatedEdges
        });
    },
    updateNodeData: (nodeId, newData) => {
        set((state) => {
            const updatedNodes = state.nodes.map((node) => {
                if (node.id === nodeId) {
                    return { ...node, data: { ...node.data, ...newData } };
                }
                return node;
            });
            return { nodes: updatedNodes };
        });
    },
    
}));

--------------------------------------------------

File Path: frontend\src\submit.js
Contents:
// frontend/src/submit.js

import axios from 'axios';
import { useStore } from './store';

export const SubmitButton = () => {
  const { nodes, edges } = useStore();  // Access nodes and edges from your global store

  const handleSubmit = async () => {
    try {
      // Prepare the data payload
      const payload = { nodes, edges };

      // Send a POST request to the backend
      const response = await axios.post('http://127.0.0.1:8000/pipelines/parse', payload);

      // Display response data in an alert
      const { num_nodes, num_edges, is_dag } = response.data;
      alert(`Nodes: ${num_nodes}, Edges: ${num_edges}, Is DAG: ${is_dag}`);
    } catch (error) {
      console.error("Error submitting pipeline data:", error);
      alert("There was an error submitting the data to the backend.");
    }
  };

  return (
    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
};

--------------------------------------------------

File Path: frontend\src\toolbar.js
Contents:
// toolbar.js

import { DraggableNode } from './draggableNode';

export const PipelineToolbar = () => {

    return (
        <div style={{ padding: '10px' }}>
            <div style={{ marginTop: '20px', display: 'flex', flexWrap: 'wrap', gap: '10px' }}>
                <DraggableNode type='customInput' label='Input' />
                <DraggableNode type='llm' label='LLM' />
                <DraggableNode type='customOutput' label='Output' />
                <DraggableNode type='text' label='Text' />
            </div>
        </div>
    );
};

--------------------------------------------------

File Path: frontend\src\ui.js
Contents:
// ui.js
// Displays the drag-and-drop UI
// --------------------------------------------------

import { useState, useRef, useCallback } from 'react';
import ReactFlow, { Controls, Background, MiniMap } from 'reactflow';
import { useStore } from './store';
import { shallow } from 'zustand/shallow';
import { InputNode } from './nodes/inputNode';
import { LLMNode } from './nodes/llmNode';
import { OutputNode } from './nodes/outputNode';
import { TextNode } from './nodes/textNode';

import 'reactflow/dist/style.css';

const gridSize = 20;
const proOptions = { hideAttribution: true };
const nodeTypes = {
  customInput: InputNode,
  llm: LLMNode,
  customOutput: OutputNode,
  text: TextNode,
};

const selector = (state) => ({
  nodes: state.nodes,
  edges: state.edges,
  getNodeID: state.getNodeID,
  addNode: state.addNode,
  onNodesChange: state.onNodesChange,
  onEdgesChange: state.onEdgesChange,
  onConnect: state.onConnect,
});

export const PipelineUI = () => {
    const reactFlowWrapper = useRef(null);
    const [reactFlowInstance, setReactFlowInstance] = useState(null);
    const {
      nodes,
      edges,
      getNodeID,
      addNode,
      onNodesChange,
      onEdgesChange,
      onConnect
    } = useStore(selector, shallow);

    const getInitNodeData = (nodeID, type) => {
      let nodeData = { id: nodeID, nodeType: `${type}` };
      return nodeData;
    }

    const onDrop = useCallback(
        (event) => {
          event.preventDefault();
    
          const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();
          if (event?.dataTransfer?.getData('application/reactflow')) {
            const appData = JSON.parse(event.dataTransfer.getData('application/reactflow'));
            const type = appData?.nodeType;
      
            // check if the dropped element is valid
            if (typeof type === 'undefined' || !type) {
              return;
            }
      
            const position = reactFlowInstance.project({
              x: event.clientX - reactFlowBounds.left,
              y: event.clientY - reactFlowBounds.top,
            });

            const nodeID = getNodeID(type);
            const newNode = {
              id: nodeID,
              type,
              position,
              data: getInitNodeData(nodeID, type),
            };
      
            addNode(newNode);
          }
        },
        [reactFlowInstance]
    );

    const onDragOver = useCallback((event) => {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'move';
    }, []);

    return (
        <>
        <div ref={reactFlowWrapper} style={{width: '100wv', height: '70vh'}}>
            <ReactFlow
                nodes={nodes}
                edges={edges}
                onNodesChange={onNodesChange}
                onEdgesChange={onEdgesChange}
                onConnect={onConnect}
                onDrop={onDrop}
                onDragOver={onDragOver}
                onInit={setReactFlowInstance}
                nodeTypes={nodeTypes}
                proOptions={proOptions}
                snapGrid={[gridSize, gridSize]}
                connectionLineType='smoothstep'
            >
                <Background color="#aaa" gap={gridSize} />
                <Controls />
                <MiniMap />
            </ReactFlow>
        </div>
        </>
    )
}

--------------------------------------------------

